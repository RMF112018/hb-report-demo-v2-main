---
description: 
globs: 
alwaysApply: false
---
# HB Report Demo v3.0 - Project Page Development Ruleset

## Overview

This ruleset defines the architecture, patterns, and guidelines for developing the project page (`/project/[projectId]`) in HB Report Demo v3.0. The project page serves as the central hub for project management tools and follows enterprise-grade standards.

## Architecture Overview

### Core File Structure

```
app/project/[projectId]/
├── page.tsx                           # Main project page entry point
├── components/
│   ├── ProjectControlCenterContent.tsx # Main content component
│   ├── ProjectPageContent.tsx          # Page content wrapper
│   ├── layout/
│   │   ├── ProjectLayout.tsx          # Layout wrapper
│   │   └── ProjectContent.tsx         # Content container
│   └── ResponsibilityMatrixCore.tsx   # Matrix component
├── constants/
│   └── config.ts                      # Tab configurations
└── types/
    └── project.ts                     # Type definitions
```

### Key Dependencies

- **Main App Integration**: `app/main-app/page.tsx` - Primary navigation hub
- **Layout Components**: `components/layout/` - Shared layout components
- **UI Components**: `components/ui/` - Shadcn/UI component library
- **Context**: `context/auth-context.tsx` - Authentication and user state
- **Hooks**: `hooks/` - Custom React hooks for state management
- **Dashboard Components**: `components/dashboard/DashboardGrid.tsx` - Dashboard grid system
- **Analytics Cards**: `components/cards/` - Analytics card components

## Page Layout Architecture

### 1. Three-Panel Layout Structure

```
┌─────────────────────────────────────────────────────────────┐
│                    Page Header                              │
├─────────────────────────────────────────────────────────────┤
│ Left │                                                      │
│ Side │           Main Content Area                          │
│ bar  │                                                      │
│ (20% │           (80% width)                                │
│ width│                                                      │
│      │                                                      │
└─────────────────────────────────────────────────────────────┘
```

### 2. Component Hierarchy

- **ProjectLayout**: Root layout wrapper
- **ProjectContent**: Main content container
- **ProjectControlCenterContent**: Core content logic
- **ProjectPageContent**: Content wrapper with header integration

## Core Tab System

### 1. Main Tab Configuration

Located in: `app/project/[projectId]/constants/config.ts`

```typescript
export const CORE_TABS_CONFIG = [
  { id: "dashboard", label: "Dashboard", icon: BarChart3 },
  { id: "checklists", label: "Checklists", icon: CheckSquare },
  { id: "productivity", label: "Productivity", icon: MessageSquare },
  { id: "staffing", label: "Staffing", icon: Calendar },
  { id: "responsibility-matrix", label: "Responsibility Matrix", icon: Users },
  { id: "reports", label: "Reports", icon: FileText },
]
```

### 2. Sub-Tab Implementation Pattern

**For tabs requiring sub-navigation, use the Tabs component pattern:**

```typescript
// Example: Staffing sub-tabs
case "staffing":
  return (
    <div className="space-y-4 w-full max-w-full">
      <Tabs defaultValue="dashboard" className="w-full">
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="dashboard">Dashboard</TabsTrigger>
          <TabsTrigger value="timeline">Timeline</TabsTrigger>
          <TabsTrigger value="spcr">SPCR</TabsTrigger>
        </TabsList>
        <TabsContent value="dashboard" className="w-full max-w-full overflow-hidden">
          <StaffingDashboard
            projectId={projectId}
            projectData={projectData}
            userRole={userRole}
            className="w-full"
            isCompact={false}
            isFullScreen={isFocusMode}
          />
        </TabsContent>
        {/* Additional TabsContent blocks */}
      </Tabs>
    </div>
  )
```

## Navigation State Management

### 1. NavigationState Interface

```typescript
interface NavigationState {
  category: string | null
  tool: string | null
  subTool: string | null
  coreTab: string | null
  staffingSubTab: string | null // Example sub-tab state
}
```

### 2. State Management Pattern

- Use `useState` for local navigation state
- Implement tab change handlers: `handleCoreTabChange(tabId: string)`
- Reset sub-tab states when switching main tabs
- Maintain consistent state across component re-renders

## Content Injection Process

### 1. Component-Based Injection

All content should be injected through dedicated components:

```typescript
// Main content rendering
const renderCoreTabContent = () => {
  switch (navigation.coreTab) {
    case "dashboard":
      return <DashboardContent />
    case "checklists":
      return <ChecklistsContent />
    case "staffing":
      return <StaffingContent />
    // ... other cases
  }
}
```

### 2. Sidebar Content Injection

```typescript
// Sidebar content function
export const getProjectSidebarContent = (
  projectData: any,
  navigation: NavigationState,
  projectMetrics: any,
  activeTab?: string
) => {
  // Return sidebar JSX based on current state
}
```

## Dashboard Integration Standards

### 1. Analytics Cards Implementation

**All dashboard tabs must use the DashboardGrid system with analytics cards:**

```typescript
// Required structure for dashboard tabs
<DashboardComponent
  projectId={projectId}
  projectData={projectData}
  userRole={userRole}
  className="w-full"
  isCompact={false}
  isFullScreen={isFocusMode}
/>
```

### 2. Analytics Card Architecture

**Cards must be created in dedicated directories:**
- `components/cards/staffing/` - Staffing analytics cards
- `components/cards/financial/` - Financial analytics cards
- `components/cards/it/` - IT analytics cards

**Card Implementation Pattern:**

```typescript
// Example: StaffingAnalyticsCards.tsx
export const TeamUtilizationCard: React.FC<DashboardCardProps> = ({ 
  projectId, 
  isCompact = false 
}) => {
  const { getProjectStaff } = useStaffingStore()
  const staffData = getProjectStaff(projectId)
  
  return (
    <DashboardCardWrapper
      title="Team Utilization"
      description="Current team utilization rates"
      className="h-full"
    >
      {/* Card content */}
    </DashboardCardWrapper>
  )
}
```

### 3. Dashboard Grid Integration

**All dashboard cards must be registered in DashboardGrid.tsx:**

```typescript
// Add new card types to CARD_COMPONENTS
const CARD_COMPONENTS = {
  // ... existing cards
  'team-utilization': TeamUtilizationCard,
  'labor-cost-analysis': LaborCostAnalysisCard,
  'spcr-activity': SPCRActivityCard,
  'team-experience': TeamExperienceCard,
  'project-staffing-overview': ProjectStaffingOverviewCard,
  'staffing-alerts': StaffingAlertsCard,
}
```

### 4. Dashboard Component Standards

**Dashboard components must follow this interface:**

```typescript
interface DashboardComponentProps {
  projectId: string
  projectData: any
  userRole: string
  className?: string
  isCompact?: boolean
  isFullScreen?: boolean
}
```

## Focus Mode Implementation

### 1. Focus Mode Container Structure

**Critical: Focus mode must support proper scrolling:**

```typescript
// Focus mode rendering with proper scrolling
if (isFocusMode) {
  return (
    <div className="fixed inset-0 bg-white dark:bg-gray-950 flex flex-col z-50">
      <div className="flex-1 overflow-y-auto overflow-x-hidden min-h-0">
        <div className="p-6 min-h-full w-full max-w-full">{mainContent}</div>
      </div>
    </div>
  )
}
```

### 2. Content Area Scrolling Fix

**Content areas must handle focus mode properly:**

```typescript
// Content area with conditional styling for focus mode
<div className="flex-1 w-full min-w-0 max-w-full min-h-0">
  <div className={cn(
    "w-full min-w-0 max-w-full",
    isFocusMode ? "min-h-full" : "h-full overflow-hidden"
  )}>
    {renderCoreTabContent()}
  </div>
</div>
```

### 3. Dashboard Focus Mode Integration

**Dashboard components must support isFullScreen prop:**

```typescript
// Dashboard component with focus mode support
const DashboardComponent: React.FC<DashboardComponentProps> = ({
  projectId,
  isFullScreen = false,
  // ... other props
}) => {
  return (
    <div className={cn(
      isFullScreen ? "h-full flex flex-col overflow-hidden" : "space-y-4"
    )}>
      {/* Header sections with flex-shrink-0 in full screen */}
      <div className={cn(isFullScreen && "flex-shrink-0")}>
        {/* Header content */}
      </div>
      
      {/* Main content with proper scrolling */}
      <div className={cn(
        isFullScreen ? "flex-1 overflow-y-auto overflow-x-hidden" : ""
      )}>
        {/* Dashboard content */}
      </div>
    </div>
  )
}
```

## Styling Guidelines

### 1. Responsive Design Patterns

```typescript
// Desktop/Tablet Navigation
<div className="hidden sm:block">
  <div className="flex space-x-6 overflow-x-auto">
    {/* Desktop tabs */}
  </div>
</div>

// Mobile Dropdown
<div className="sm:hidden py-3">
  <Select value={currentTab} onValueChange={handleTabChange}>
    {/* Mobile dropdown */}
  </Select>
</div>
```

### 2. Consistent Spacing and Layout

- **Main containers**: `space-y-6 w-full max-w-full overflow-hidden`
- **Card components**: `shadow-sm hover:shadow-md transition-shadow duration-200`
- **Tab navigation**: `py-3 px-1 border-b-2 font-medium text-sm`
- **Content areas**: `min-h-96 w-full max-w-full overflow-hidden`
- **Focus mode containers**: `min-h-0` for proper flex behavior

### 3. Color and Theme Consistency

- **Active states**: `border-primary text-primary`
- **Inactive states**: `border-transparent text-muted-foreground`
- **Hover states**: `hover:text-foreground hover:border-gray-300`
- **Focus modes**: Implemented with overlay pattern and proper scrolling

## Component Development Standards

### 1. Component Structure Template

```typescript
interface ComponentProps {
  projectId: string
  projectData: any
  userRole: string
  user: any
  activeTab?: string
  onTabChange?: (tabId: string) => void
  isFullScreen?: boolean // Required for focus mode support
}

const Component: React.FC<ComponentProps> = ({ 
  projectId, 
  projectData, 
  userRole, 
  user, 
  activeTab, 
  onTabChange,
  isFullScreen = false 
}) => {
  // Component logic
  return (
    <div className={cn(
      isFullScreen ? "h-full flex flex-col overflow-hidden" : "space-y-4 w-full max-w-full"
    )}>
      {/* Component content */}
    </div>
  )
}
```

### 2. Error Handling and Loading States

```typescript
if (!mounted) {
  return (
    <div className="flex items-center justify-center min-h-screen">
      <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
    </div>
  )
}
```

### 3. Analytics Card Development Pattern

**All analytics cards must follow this pattern:**

```typescript
// 1. Create card component file
// components/cards/[module]/[ModuleName]AnalyticsCards.tsx

// 2. Define card interface
interface CardProps extends DashboardCardProps {
  projectId: string
  isCompact?: boolean
}

// 3. Implement card with data integration
export const AnalyticsCard: React.FC<CardProps> = ({ projectId, isCompact = false }) => {
  // Use appropriate store/hook for data
  const data = useModuleStore()
  
  return (
    <DashboardCardWrapper
      title="Card Title"
      description="Card description"
      className="h-full"
    >
      {/* Card content with proper responsive design */}
    </DashboardCardWrapper>
  )
}

// 4. Export all cards from single file
export {
  AnalyticsCard1,
  AnalyticsCard2,
  // ... other cards
}
```

## Integration Points

### 1. Main App Integration

- **Entry point**: `app/main-app/page.tsx`
- **Content injection**: Through `ProjectContent` component
- **Navigation sync**: Via `activeTab` and `onTabChange` props

### 2. Financial Hub Integration

```typescript
// Conditional content rendering
if (activeTab === "financial-management" || activeTab === "financial-hub") {
  return <FinancialHubProjectContent {...props} />
}
```

### 3. Authentication Integration

```typescript
// Auth context usage
const { user, userRole } = useAuth()
```

### 4. Store Integration

**All modules must integrate with appropriate Zustand stores:**

```typescript
// Example: Staffing module integration
import { useStaffingStore } from '@/app/dashboard/staff-planning/store/useStaffingStore'

const { staff, projects, spcrs, getProjectStaff } = useStaffingStore()
```

## Data Flow Patterns

### 1. Props Flow

```
MainApp → ProjectContent → ProjectControlCenterContent → TabContent → DashboardComponent
```

### 2. State Management

- **Local state**: Navigation, UI states, form data
- **Context state**: User authentication, global preferences
- **Store state**: Module-specific data (staffing, financial, etc.)
- **Prop drilling**: Project data, user role, handlers

### 3. Event Handling

```typescript
// Consistent event handler patterns
const handleTabChange = (tabId: string) => {
  setNavigation((prev) => ({ ...prev, coreTab: tabId }))
  // Additional logic
}
```

## Development Best Practices

### 1. TypeScript Standards

- Always define proper interfaces for component props
- Use union types for tab IDs and navigation states
- Implement proper null checking and optional chaining
- Define card-specific interfaces extending DashboardCardProps

### 2. Performance Optimization

- Implement lazy loading for heavy components
- Use React.memo for expensive renders
- Optimize re-renders with useCallback and useMemo
- Use proper data memoization in analytics cards

### 3. Testing Considerations

- Test files should mirror component structure
- Mock all external dependencies
- Test responsive behavior and state changes
- Test focus mode functionality and scrolling

### 4. Accessibility Standards

- Implement proper ARIA labels for navigation
- Ensure keyboard navigation works correctly
- Maintain focus management in dynamic content
- Support screen readers in analytics cards

## File Modification Guidelines

### 1. Adding New Tabs

1. Update `CORE_TABS_CONFIG` in `constants/config.ts`
2. Add case in `renderCoreTabContent()` function
3. Update sidebar content functions
4. Add corresponding metric and action definitions
5. Create dashboard component if analytics are needed

### 2. Adding New Analytics Cards

1. Create card component file in `components/cards/[module]/`
2. Implement cards following the analytics card pattern
3. Register cards in `DashboardGrid.tsx`
4. Create dashboard component using `DashboardGrid`
5. Integrate with appropriate data stores

### 3. Modifying Existing Components

1. Maintain existing prop interfaces
2. Preserve responsive design patterns
3. Update related sidebar content
4. Test integration with main app
5. Ensure focus mode compatibility

### 4. Adding Sub-Tab Systems

1. Follow the established Tabs component pattern
2. Use consistent styling with `TabsList` and `TabsTrigger`
3. Implement proper content organization
4. Maintain mobile responsiveness
5. Support focus mode with `isFullScreen` prop

## Integration with v3.0 Architecture

### 1. Main App Layout Integration

- Project page integrates with main app through controlled props
- Sidebar content is injected through dedicated functions
- Navigation state is maintained separately from main app

### 2. Shared Component Usage

- Use components from `components/ui/` for consistency
- Leverage shared layout components
- Maintain styling consistency with v3.0 design system
- Use `DashboardGrid` and `DashboardCardWrapper` for analytics

### 3. Future Extensibility

- Component architecture supports easy addition of new tabs
- Sidebar content system allows for dynamic content based on context
- Responsive design patterns ensure mobile compatibility
- Dashboard system supports unlimited analytics cards

## Critical Implementation Notes

1. **Always use `w-full max-w-full overflow-hidden`** for content containers
2. **Maintain three-panel layout proportions**: 20% - 60% - 20%
3. **Implement proper loading states** for all async operations
4. **Use consistent tab navigation patterns** across all implementations
5. **Preserve focus mode functionality** with proper scrolling support
6. **Maintain sidebar content injection** through dedicated functions
7. **Follow responsive design patterns** for mobile compatibility
8. **Use TypeScript interfaces** for all component props and state
9. **Implement analytics cards** using DashboardGrid system
10. **Support isFullScreen prop** in all dashboard components
11. **Use proper flex patterns** for focus mode containers
12. **Import cn utility** from `@/lib/utils` for conditional styling
13. **Pass isFullScreen={isFocusMode}** to all dashboard components
14. **Use min-h-0 and min-h-full** for proper flex behavior in focus mode

## Focus Mode Scrolling Requirements

### 1. Container Structure

```typescript
// Focus mode container - REQUIRED structure
if (isFocusMode) {
  return (
    <div className="fixed inset-0 bg-white dark:bg-gray-950 flex flex-col z-50">
      <div className="flex-1 overflow-y-auto overflow-x-hidden min-h-0">
        <div className="p-6 min-h-full w-full max-w-full">{mainContent}</div>
      </div>
    </div>
  )
}
```

### 2. Content Area Fixes

```typescript
// Content area - REQUIRED for proper scrolling
<div className="flex-1 w-full min-w-0 max-w-full min-h-0">
  <div className={cn(
    "w-full min-w-0 max-w-full",
    isFocusMode ? "min-h-full" : "h-full overflow-hidden"
  )}>
    {renderCoreTabContent()}
  </div>
</div>
```

### 3. Dashboard Component Focus Mode

```typescript
// Dashboard component focus mode support - REQUIRED
const DashboardComponent: React.FC<Props> = ({ isFullScreen = false }) => {
  return (
    <div className={cn(
      isFullScreen ? "h-full flex flex-col overflow-hidden" : "space-y-4"
    )}>
      {/* Header sections */}
      <div className={cn(isFullScreen && "flex-shrink-0")}>
        {/* Header content */}
      </div>
      
      {/* Scrollable content */}
      <div className={cn(
        isFullScreen ? "flex-1 overflow-y-auto overflow-x-hidden" : ""
      )}>
        <DashboardGrid />
      </div>
    </div>
  )
}
```

This ruleset should be consulted for all project page development to ensure consistency with the v3.0 architecture and design standards, including the new analytics dashboard requirements and focus mode scrolling fixes.
